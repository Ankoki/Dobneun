package com.ankoki.dobneun.biomes.effects;

import net.minecraft.core.Holder;
import net.minecraft.sounds.SoundEvent;
import net.minecraft.sounds.SoundEvents;

// TODO allow custom packs to potentially use their music sounds?
@SuppressWarnings("unused")
public enum MusicOptions {

	AMBIENT_CAVE(SoundEvents.AMBIENT_CAVE),
	AMBIENT_BASALT_DELTAS_ADDITIONS(SoundEvents.AMBIENT_BASALT_DELTAS_ADDITIONS),
	AMBIENT_BASALT_DELTAS_LOOP(SoundEvents.AMBIENT_BASALT_DELTAS_LOOP),
	AMBIENT_BASALT_DELTAS_MOOD(SoundEvents.AMBIENT_BASALT_DELTAS_MOOD),
	AMBIENT_CRIMSON_FOREST_ADDITIONS(SoundEvents.AMBIENT_CRIMSON_FOREST_ADDITIONS),
	AMBIENT_CRIMSON_FOREST_LOOP(SoundEvents.AMBIENT_CRIMSON_FOREST_LOOP),
	AMBIENT_CRIMSON_FOREST_MOOD(SoundEvents.AMBIENT_CRIMSON_FOREST_MOOD),
	AMBIENT_NETHER_WASTES_ADDITIONS(SoundEvents.AMBIENT_NETHER_WASTES_ADDITIONS),
	AMBIENT_NETHER_WASTES_LOOP(SoundEvents.AMBIENT_NETHER_WASTES_LOOP),
	AMBIENT_NETHER_WASTES_MOOD(SoundEvents.AMBIENT_NETHER_WASTES_MOOD),
	AMBIENT_SOUL_SAND_VALLEY_ADDITIONS(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_ADDITIONS),
	AMBIENT_SOUL_SAND_VALLEY_LOOP(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_LOOP),
	AMBIENT_SOUL_SAND_VALLEY_MOOD(SoundEvents.AMBIENT_SOUL_SAND_VALLEY_MOOD),
	AMBIENT_WARPED_FOREST_ADDITIONS(SoundEvents.AMBIENT_WARPED_FOREST_ADDITIONS),
	AMBIENT_WARPED_FOREST_LOOP(SoundEvents.AMBIENT_WARPED_FOREST_LOOP),
	AMBIENT_WARPED_FOREST_MOOD(SoundEvents.AMBIENT_WARPED_FOREST_MOOD),
	MUSIC_DRAGON(SoundEvents.MUSIC_DRAGON),
	MUSIC_END(SoundEvents.MUSIC_END),
	MUSIC_GAME(SoundEvents.MUSIC_GAME),
	MUSIC_MENU(SoundEvents.MUSIC_MENU),
	MUSIC_BIOME_BASALT_DELTAS(SoundEvents.MUSIC_BIOME_BASALT_DELTAS),
	MUSIC_BIOME_CRIMSON_FOREST(SoundEvents.MUSIC_BIOME_CRIMSON_FOREST),
	MUSIC_BIOME_DEEP_DARK(SoundEvents.MUSIC_BIOME_DEEP_DARK),
	MUSIC_BIOME_DRIPSTONE_CAVES(SoundEvents.MUSIC_BIOME_DRIPSTONE_CAVES),
	MUSIC_BIOME_GROVE(SoundEvents.MUSIC_BIOME_GROVE),
	MUSIC_BIOME_JAGGED_PEAKS(SoundEvents.MUSIC_BIOME_JAGGED_PEAKS),
	MUSIC_BIOME_LUSH_CAVES(SoundEvents.MUSIC_BIOME_LUSH_CAVES),
	MUSIC_BIOME_SWAMP(SoundEvents.MUSIC_BIOME_SWAMP),
	MUSIC_BIOME_JUNGLE_AND_FOREST(SoundEvents.MUSIC_BIOME_JUNGLE_AND_FOREST),
	MUSIC_BIOME_OLD_GROWTH_TAIGA(SoundEvents.MUSIC_BIOME_OLD_GROWTH_TAIGA),
	MUSIC_BIOME_MEADOW(SoundEvents.MUSIC_BIOME_MEADOW),
	MUSIC_BIOME_NETHER_WASTES(SoundEvents.MUSIC_BIOME_NETHER_WASTES),
	MUSIC_BIOME_FROZEN_PEAKS(SoundEvents.MUSIC_BIOME_FROZEN_PEAKS),
	MUSIC_BIOME_SNOWY_SLOPES(SoundEvents.MUSIC_BIOME_SNOWY_SLOPES),
	MUSIC_BIOME_SOUL_SAND_VALLEY(SoundEvents.MUSIC_BIOME_SOUL_SAND_VALLEY),
	MUSIC_BIOME_STONY_PEAKS(SoundEvents.MUSIC_BIOME_STONY_PEAKS),
	MUSIC_BIOME_WARPED_FOREST(SoundEvents.MUSIC_BIOME_WARPED_FOREST),
	MUSIC_UNDER_WATER(SoundEvents.MUSIC_UNDER_WATER),
	NOTE_BLOCK_BASEDRUM(SoundEvents.NOTE_BLOCK_BASEDRUM),
	NOTE_BLOCK_BASS(SoundEvents.NOTE_BLOCK_BASS),
	NOTE_BLOCK_BELL(SoundEvents.NOTE_BLOCK_BELL),
	NOTE_BLOCK_CHIME(SoundEvents.NOTE_BLOCK_CHIME),
	NOTE_BLOCK_FLUTE(SoundEvents.NOTE_BLOCK_FLUTE),
	NOTE_BLOCK_GUITAR(SoundEvents.NOTE_BLOCK_GUITAR),
	NOTE_BLOCK_HARP(SoundEvents.NOTE_BLOCK_HARP),
	NOTE_BLOCK_HAT(SoundEvents.NOTE_BLOCK_HAT),
	NOTE_BLOCK_PLING(SoundEvents.NOTE_BLOCK_PLING),
	NOTE_BLOCK_SNARE(SoundEvents.NOTE_BLOCK_SNARE),
	NOTE_BLOCK_XYLOPHONE(SoundEvents.NOTE_BLOCK_XYLOPHONE),
	NOTE_BLOCK_IRON_XYLOPHONE(SoundEvents.NOTE_BLOCK_IRON_XYLOPHONE),
	NOTE_BLOCK_COW_BELL(SoundEvents.NOTE_BLOCK_COW_BELL),
	NOTE_BLOCK_DIDGERIDOO(SoundEvents.NOTE_BLOCK_DIDGERIDOO),
	NOTE_BLOCK_BIT(SoundEvents.NOTE_BLOCK_BIT),
	NOTE_BLOCK_BANJO(SoundEvents.NOTE_BLOCK_BANJO),
	NOTE_BLOCK_IMITATE_ZOMBIE(SoundEvents.NOTE_BLOCK_IMITATE_ZOMBIE),
	NOTE_BLOCK_IMITATE_SKELETON(SoundEvents.NOTE_BLOCK_IMITATE_SKELETON),
	NOTE_BLOCK_IMITATE_CREEPER(SoundEvents.NOTE_BLOCK_IMITATE_CREEPER),
	NOTE_BLOCK_IMITATE_ENDER_DRAGON(SoundEvents.NOTE_BLOCK_IMITATE_ENDER_DRAGON),
	NOTE_BLOCK_IMITATE_WITHER_SKELETON(SoundEvents.NOTE_BLOCK_IMITATE_WITHER_SKELETON),
	NOTE_BLOCK_IMITATE_PIGLIN(SoundEvents.NOTE_BLOCK_IMITATE_PIGLIN);

	private final Holder<SoundEvent> holder;
	MusicOptions(Holder<SoundEvent> holder) {
		this.holder = holder;
	}

	/**
	 * Gets the holder of this music option.
	 *
	 * @return the holder.
	 */
	public Holder<SoundEvent> getHolder() {
		return this.holder;
	}

}